// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  access_token             String? @db.String
  expires_at               Int?
  refresh_token_expires_in Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  bio             String?
  username        String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  followingIds    String[]  @db.ObjectId
  followerIds     String[]  @db.ObjectId
  bookMarkIds     String[]  @db.ObjectId
  hasNotification Boolean?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts       Account[]
  Post           Post[]
  Comment        Comment[]
  Notification   Notification[]
  repliedComment RepliedComment[]
}

model AdminAccount {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  title       String
  desc        String?
  thumbnail   String
  accepted    Boolean  @default(true)
  rawContent  String
  htmlContent String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likedIds    String[] @db.ObjectId

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  post           Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  repliedComment RepliedComment[]
}

model RepliedComment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  commentId String   @db.ObjectId

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
